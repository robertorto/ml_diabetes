import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import data_handler
import util
import pickle

# print('Abriu a p√°gina')

# verificar se a senha de acesso est√° correta
if not util.check_password():
    # se a senha estiver errada, para o processamento do app.
    print('usu√°rio n√£o logado')
    st.stop()

print('Carregou a p√°gina')



# vamos carregar os dados do dataset de diabetes
dados = data_handler.load_data()

# carrega o modelo de predi√ß√£o j√° treinado do dataset de diabetes ## modelo que j√° usei em outra disciplina.
model = pickle.load(open('./models/model.pkl', 'rb')) 

# come√ßa a estrutura da interface do sistema
st.title('App dos dados de diabetes')

data_analyses_on = st.toggle('Exibir an√°lise dos dados')

if data_analyses_on:
    st.header('Dados do dataset Diabetes')

    # exibir o dataframe
    st.dataframe(dados)

    # plota um hist√≥rico das idades dos pacientes

    st.header('Histograma de idades')
    fig = plt.figure()
    plt.hist(dados['Age'], bins=10)
    plt.xlabel('Idade')
    plt.ylabel('Quantidade')
    st.pyplot(fig)

    # plota um gr√°fico de barras com a contagem dos pacientes com diabetes
    st.header('Diab√©ticos')
    st.bar_chart(dados.Outcome.value_counts())

# daqui em diante vamos montar a inteface para capturar os dados de input do usu√°rio para realizar a predi√ß√£o
# que vai identificar se um paciente possui ou n√£o diabetes
st.header('Preditor de pacientes com diabetes')


# Atributos exibidos e utilizados pelo modelo de previs√£o:

# Pregnancies - 'int'
# Glucose - 'int'
# BloodPressure - 'int'
# Insulin - 'int'
# BMI - 'float'
# DiabetesPedigreeFunction - 'float'
# Age - 'int'
# Outcome - 'int' objetivo da previs√£o

# ordem ['Pregnancies', 'Glucose', 'BloodPressure', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']

# essas foram as informa√ß√µes utilizadas para treinar o modelo
# assim, todas essas informa√ß√µes tamb√©m devem ser passadas para o modelo realizar a predi√ß√£o

# define a linha 1 de inputs com 3 colunas
col1, col2, col3 = st.columns(3)

with col1:
    # pregnancies -- digitar o n√∫mero de gravidez que a paciente (se mulher)
    pregnancies = st.slider('How many pregnancies?', min_value=0, max_value=17, step=1 )

with col2:
    # glucose -- digitar o valor da glucose
    glucose = st.slider('What is the glucose level?', 0, 200, 120)

with col3:
    # BloodPressure -- digitar a press√£o arterial do paciente
    blood_pressure = st.slider('Blood pressure level?', 0, 120, 60)



# define a linha 2 de inputs tamb√©m com 3 colunas
col1, col2, col3 = st.columns(3)

with col1:
    # Insulin -- digitar o valor da glucose
    insulin = st.slider("Pacient's insulin level", 0, 900, 100)

with col2:
    # BloodPressure -- digitar a press√£o arterial do paciente
    bmi = st.slider("Patient's BMI?", 0.0, 70.0, 30.0)

with col3:
    # DiabetesPedigreeFunction -- entrar com o valor da fun√ß√£o pedigree
    diabetes_pedigree_function = st.slider("Pacient's PedigreeFunction", 0.00, 2.50, 0.05)


# define a linha 3 de inputs com 2 colunas
col1, col2 = st.columns(2)

with col1:
    # age -- digitar a idade em anos
    age = st.slider('How old are the patient?', 0, 100, 25)

with col2:
    # Bot√£o que serve pra fazer a verifica√ß√£o
    submit = st.button('Verificar')



# Como todos os valores deste dataset j√° s√£o num√©ricos, n√£o precisamos fazer o data mapping
# Vamos criar um dicion√°rio para armazenar todos os dados do paciente

paciente = {}


# verificar se o bot√£o submit foi pressionado e se o campo Outcome est√° em cache
if submit or 'outcome' in st.session_state:


    # setando todos os attributos dos paciente na ordem do modelo de previs√£o
    paciente = {
        'Pregnancies': pregnancies,
        'Glucose': glucose,
        'BloodPressure': blood_pressure,
        'Insulin': insulin,
        'BMI': bmi,
        'DiabetesPedigreeFunction': diabetes_pedigree_function,
        'Age': age,
    }
    print(paciente)

    # converte o paciente para dataframe do pandas para ter o mesmo tipo de dados usado para o treino do modelo
    values = pd.DataFrame([paciente])
    print(values)

    # realiza a predi√ß√£o de diabetes dos pacientes com base nos dados inseridos pelo usu√°rio
    results = model.predict(values)
    print(results)

    
    # o modelo foi treinado para retornar uma lista com 0 ou 1, onde cada posi√ß√£o da lista indica se o paciente tem Diabetes (1) ou n√£o (0)
    # como estamos realizando a predi√ß√£o de somente um paciente por vez, o modelo dever√° retornar somente um elemento na lista
    if len(results) == 1:
        # converte o valor retornado para inteiro
        outcome = int(results[0])
        
        # verifica se o paciente tem diabetes ou n√£o
        if outcome == 1:
            # se sim, exibe uma mensagem que o paciente apresente diabetes
            st.subheader('Paciente diagnosticado com Diabetes üò¢')
            if 'outcome' not in st.session_state:
                st.snow()
        else:
            # se n√£o, exibe uma mensagem que o paciente n√£o apresenta diabetes
            st.subheader('Paciente N√ÉO apresenta Diabetes! üòÉüôåüèª')
            if 'outcome' not in st.session_state:
                st.balloons()
        
        # salva no cache da aplica√ß√£o se o paciente tem diabetes
        st.session_state['outcome'] = outcome



    # verifica se existe um paciente e se j√° foi verificado se ele possui ou n√£o diabetes
    if paciente and 'outcome' in st.session_state:
        # se sim, pergunta ao usu√°rio se a predi√ß√£o est√° certa e salva essa informa√ß√£o
        st.write("A predi√ß√£o est√° correta?")
        col1, col2, col3 = st.columns([1,1,5])
        with col1:
            correct_prediction = st.button('üëçüèª')
        with col2:
            wrong_prediction = st.button('üëéüèª')
        
        # exibe uma mensagem para o usu√°rio agradecendo o feedback
        if correct_prediction or wrong_prediction:
            message = "Muito obrigado pelo feedback"
            if wrong_prediction:
                message += ", iremos usar esses dados para melhorar as predi√ß√µes"
            message += "."
            
            # adiciona no dict do paciente se a predi√ß√£o est√° correta ou n√£o
            if correct_prediction:
                paciente['CorrectPrediction'] = True
            elif wrong_prediction:
                paciente['CorrectPrediction'] = False
                
            # adiciona no dict do paciente se ele sobreviveu ou n√£o
            paciente['Outcome'] = st.session_state['outcome']
            
            # escreve a mensagem na tela
            st.write(message)
            print(message)
            
            # salva a predi√ß√£o no JSON para c√°lculo das m√©tricas de avalia√ß√£o do sistema
            data_handler.save_prediction(paciente)
    
    st.write('')
    # adiciona um bot√£o para permitir o usu√°rio realizar uma nova an√°lise
    col1, col2, col3 = st.columns(3)
    with col2:
        new_test = st.button('Iniciar Nova An√°lise')
        
        # se o usu√°rio pressionar no bot√£o e j√° existe um paciente, remove ele do cache
        if new_test and 'outcome' in st.session_state:
            del st.session_state['outcome']
            st.rerun()


# calcula e exibe as m√©tricas de avalia√ß√£o do modelo aqui, somente a acur√°ria est√° sendo usada
# TODO: adicionar as mesmas m√©tricas utilizadas na disciplina de treinamento e valida√ß√£o do modelo (recall, precision, F1-score)
accuracy_predictions_on = st.toggle('Exibir acur√°cia')

if accuracy_predictions_on:
    # pega todas as predi√ß√µes salvas no JSON
    predictions = data_handler.get_all_predictions()
    # salva o n√∫mero total de predi√ß√µes realizadas
    num_total_predictions = len(predictions)
    
    # calcula o n√∫mero de predi√ß√µes corretas e salva os resultados conforme as predi√ß√µes foram sendo realizadas
    accuracy_hist = [0]
    # salva o numero de predi√ß√µes corretas
    correct_predictions = 0
    # percorre cada uma das predi√ß√µes, salvando o total m√≥vel e o n√∫mero de predi√ß√µes corretas
    for index, paciente in enumerate(predictions):
        total = index + 1
        if paciente['CorrectPrediction'] == True:
            correct_predictions += 1
            
        # calcula a acurracia movel
        temp_accuracy = correct_predictions / total if total else 0
        # salva o valor na lista de historico de acuracias
        accuracy_hist.append(round(temp_accuracy, 2)) 
    
    # calcula a acuracia atual
    accuracy = correct_predictions / num_total_predictions if num_total_predictions else 0
    
    # exibe a acuracia atual para o usu√°rio
    st.metric(label='Acur√°cia', value=round(accuracy, 2))
    # TODO: usar o attr delta do st.metric para exibir a diferen√ßa na varia√ß√£o da acur√°cia
    
    # exibe o hist√≥rico da acur√°cia
    st.subheader("Hist√≥rico de acur√°cia")
    st.line_chart(accuracy_hist)